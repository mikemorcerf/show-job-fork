#!/usr/bin/env ruby
require 'optparse'
require 'tempfile'
require 'json'
require 'open-uri'
require 'date'

class String
  def squish
    gsub(/[[:space:]]+/, ' ').strip
  end
end

class ShowJob
  def initialize
    @parser = OptionParser.new
    @jobs   = []
    @fetched_jobs = JSON.parse URI.open('https://binarygit.github.io/jobs/jobs.json').read
    @timestamp = @fetched_jobs.pop
  end

  def show
    add_ww_jobs
    @jobs << { 'blank_line' => 'ww_jobs' }
    add_us_only_jobs
    @jobs << { 'blank_line' => 'us_only_jobs' }
    add_south_america_only_jobs
    @jobs << { 'blank_line' => 'south_america_only_jobs' }
    @parser.parse!
    show_jobs
  end

  private

  def add_ww_jobs
    @jobs << { 'header' => "🌎 𝐑𝐄𝐌𝐎𝐓𝐄 𝐅𝐔𝐋𝐋-𝐓𝐈𝐌𝐄 𝐖𝐎𝐑𝐋𝐃𝐖𝐈𝐃𝐄:\n" }

    @jobs += search_for('(world)')
  end

  def add_us_only_jobs
    @jobs << { 'header' => "😌🇺🇸 𝐑𝐄𝐌𝐎𝐓𝐄 𝐅𝐔𝐋𝐋-𝐓𝐈𝐌𝐄 𝐔𝐒𝐀:\n" }

    @jobs += search_for('(US|United States)', true)
  end

  def add_south_america_only_jobs
    @jobs << { 'header' => "🕺💃 𝐒𝐎𝐔𝐓𝐇 𝐀𝐌𝐄𝐑𝐈𝐂𝐀:\n" }

    @jobs += search_for('(South America)')
  end

  def search_for(str, sensitive = false, select = true)
    result = []

    regex = Regexp.new(str, Regexp::IGNORECASE)
    remote_regex = Regexp.new('(remote)', Regexp::IGNORECASE)

    method = select ? :select : :reject
    @fetched_jobs.each do |arr_of_hash|
      result << arr_of_hash.send(method) do |job|
        (
          (job['title'].match?(regex) && job['title'].match?(remote_regex)) ||
          (job['misc'].match?(regex) && job['misc'].match?(remote_regex))
        )
      end
    end
    result.flatten
  end

  def show_jobs
    file = Tempfile.new
    file.write prettify
    file.close
    system("less -R #{file.path}")
    file.unlink
  end

  def prettify
    result = "Jobs last fetched on: #{DateTime.parse(@timestamp).strftime('%B %d, %Y')}\n\n"

    @jobs.uniq.each do |job|
      result << job['header'] if job.key?('header')
      result << "\n" if job.key?('blank_line')

      next if job['title'].nil?

      result << "⚡️ #{job['title'].squish} at ___: #{job['href']}"
      result << "\n"
    end

    IO.popen('pbcopy', 'w') { |f| f << result }
    result
  end
end

ShowJob.new.show
